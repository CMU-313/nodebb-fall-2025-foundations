'use strict';

const assert = require('assert');

const Categories = require('../src/categories');
const apiCategories = require('../src/api/categories');
const User = require('../src/user');
const groups = require('../src/groups');
const db = require('./mocks/databasemock');

// Code partially generated by Copilot
describe('Category owner create and delete', () => {
	let ownerUid;
	let otherUid;
	let adminUid;
	let createdCategory;

	before(async () => {
		ownerUid = await User.create({ username: `owner_${Date.now()}` });
		otherUid = await User.create({ username: `other_${Date.now()}` });
		adminUid = await User.create({ username: `admin_${Date.now()}` });
		await groups.join('administrators', adminUid);

		// avoid throttle/new-user blocks
		await User.setUserField(ownerUid, 'joindate', Date.now() - (3600 * 1000));
		await User.setUserField(otherUid, 'joindate', Date.now() - (3600 * 1000));
		await User.setUserField(adminUid, 'joindate', Date.now() - (3600 * 1000));
	});

	before(async () => {
		// Delete any existing test categories
		const allCategories = await Categories.getAllCategories();
		const categoriesToDelete = allCategories
			.filter(category => category.name === 'Integration Owner Cat')
			.map(category => Categories.purge(category.cid, adminUid));
		await Promise.all(categoriesToDelete);
	});

	after(async () => {
		// Cleanup any remaining test categories
		const allCategories = await Categories.getAllCategories();
		const categoriesToDelete = allCategories
			.filter(category => category.name === 'Integration Owner Cat')
			.map(category => Categories.purge(category.cid, adminUid));
		await Promise.all(categoriesToDelete);
	});

	it('should allow authenticated user to create a category and becomes its owner', async () => {
		createdCategory = await apiCategories.create({ uid: ownerUid }, {
			name: 'Integration Owner Cat',
			description: 'Created by integration test',
		});
		assert(createdCategory);
		assert.equal(createdCategory.name, 'Integration Owner Cat');
		assert.equal(createdCategory.description, 'Created by integration test');
		
		// Verify the category exists in the database
		const categoryData = await Categories.getCategoryData(createdCategory.cid);
		assert(categoryData);
		assert.equal(categoryData.name, 'Integration Owner Cat');
		assert.equal(categoryData.ownerUid, ownerUid);
	});

	it('should not allow non-owner to delete; owner and allow admin to delete', async () => {
		// Verify non-owner cannot delete
		try {
			await apiCategories.delete({ uid: otherUid }, { cid: createdCategory.cid });
			assert.fail('Should have thrown error');
		} catch (err) {
			assert.equal(err.message, '[[error:no-privileges]]');
		}

		// Verify category still exists
		let category = await Categories.getCategoryData(createdCategory.cid);
		assert(category);
		assert.equal(category.name, 'Integration Owner Cat');

		// Verify owner can delete
		await apiCategories.delete({ uid: ownerUid, ip: '127.0.0.1' }, { cid: createdCategory.cid });
		category = await Categories.getCategoryData(createdCategory.cid);
		assert(!category);

		// Create new category for admin delete test
		createdCategory = await apiCategories.create({ uid: ownerUid }, {
			name: 'Integration Owner Cat',
			description: 'Created by integration test',
		});
		assert(createdCategory);

		// Verify admin can delete
		await apiCategories.delete({ uid: adminUid, ip: '127.0.0.1' }, { cid: createdCategory.cid });
		category = await Categories.getCategoryData(createdCategory.cid);
		assert(!category);
	});
});